#include "monty.h"
/**
 * adde - Adds the top elements of the stack
 * @stack: double pointer to top of stack
 * @line_number: line number of the OPcode
 */
void adde(stack_t **stack, unsigned int line_number)
{
	int total = 0;
	stack_t *buffer = *stack;

	if (*stack == NULL || (*stack)->next == NULL)
	{
		fprintf(stderr, "L%d: can't add, stack is too short\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	(*stack) = (*stack)->next;

	total = buffer->n + buffer->next->n;
	(*stack)->n = total;
	free(buffer);
	(*stack)->prev = NULL;
}
#include "monty.h"
/**
 * pchar - function that prints the first stack
 * @stack: double poibnter to stack
 * @line_number: line number which code is
 */
void pchar(stack_t **stack, unsigned int line_number)
{
	int count;

	if (!*stack)
	{
		fprintf(stderr, "L%d: can't pchar, stack empty\n", line_number);
		exit(EXIT_FAILURE);
	}

	count = (*stack)->n;
	if (count >= 0 && count <= 127)
		printf("%c\n", count);
	else
	{
		fprintf(stderr, "L%d: can't pchar, value out of range\n", line_number);
		exit(EXIT_FAILURE);
	}
}
#include "monty.h"
/**
 * check_int - fxn confirm number is int
 * @input: read input
 * Return: 0 for false and 1 for success
 */
int check_int(const char *input)
{
	if (input == NULL)
		return (0);
	if (*input == '\0')
		return (0);
	if (*input == '+' || *input == '-')
		input++;
	while (*input != '\0')
	{
		if (!isdigit(*input))
			return (0);
		input++;
	}
	return (1);
}
#include "monty.h"
/**
 * compd - function that creates copy of a string
 * @buf: This si the string to be cpoied
 * Return: The copy of the string
 */
char *compd(char *buf)
{
	char *cpy = NULL, *cpy_paste;
	int k, w;

	if (buf == NULL)
		return (NULL);

	k = strlen(buf);
	w = k + 1;
	cpy = malloc(sizeof(char) * w);
	if (cpy == NULL)
	{
		fprintf(stderr, "Error: malloc failed");
		exit(EXIT_FAILURE);
	}
	cpy_paste = cpy;
	while (*buf)
	{
		*cpy_paste = *buf;
		cpy_paste++;
		buf++;
	}
	*cpy_paste = '\0';
	return (cpy);
}
#include "monty.h"
/**
 * dive - Second divided by the first element
 * @stack: double pointer to top of stack
 * @line_number: line number of the OPcode
 */
void dive(stack_t **stack, unsigned int line_number)
{
	int total = 0;

	if (stack == NULL || *stack == NULL || (*stack)->next == NULL)
	{
		fprintf(stderr, "L%d: can't div, stack is too short\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	if ((*stack)->n == 0)
	{
		fprintf(stderr, "L%d: division by zero\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	(*stack) = (*stack)->next;

	total = (*stack)->n / (*stack)->prev->n;
	(*stack)->n = total;
	free((*stack)->prev);
	(*stack)->prev = NULL;
}
#include "monty.h"
/**
 * fail - for when there is no corresp fxn
 * @stack: double pointer to stack
 * @line_number: this is the line number of error
 */
void fail(stack_t __attribute__((unused)) **stack, unsigned int line_number)
{
	fprintf(stderr, "L%d: unknown instruction\n", line_number);
	exit(EXIT_FAILURE);
}
#include "monty.h"
/**
 * free_lists - frees up the linked list
 * @head: head of stack
 * Return: void
 */
void free_lists(stack_t *head)
{
	stack_t *buffer;

	if (head == NULL)
		return;
	while (head != NULL)
	{
		buffer = head;
		head = head->next;
		free(buffer);
	}
}


/**
 * free_prim - Frees memomry of the prims
 * @prim: double pointer to str
 * Return: void
 */
void free_prim(char **prim)
{
	int l = 0;

	if (prim == NULL)
		return;
	while (prim[l] != NULL)
	{
		free(prim[l]);
		l++;
	}
	free(prim);
}
#include "monty.h"
/**
 * handle_functions - Picks the function
 * @state: This is string passed to fxn
 * @l: This is the line number
 * Return: A pointer to the string
 */
void (*handle_functions(char *state, unsigned int l))(stack_t **stack, unsigned int)
{
	int k = 0;

	instruction_t op[] = {
		{"push", push},
		{"add", adde},
		{"nop", nop},
		{"pall", pall},
		{"sub", sub},
		{"pint", pint},
		{"swap", swap},
		{"mul", mul},
		{"div", dive},
		{"pop", pop},
		{"pchar", pchar},
		{"mod", mod},
		{"pstr", pstr},
		{"rotr", rotr},
		{"rotl", rotl},
		{"queue", push_que},
		{NULL, NULL}};
	(void)l;

	while (op[k].opcode != NULL)
	{
		if (!strcmp(state, op[k].opcode))
			return (op[k].f);
		k++;
	}
	return (NULL);
}
#include "monty.h"
/**
 * blow - expands stings and couple
 * @holder: This is the stringto be blown
 * Return: Pointer to array of string or nothing
 */
char **blow(char *holder)
{
	char *hold, *cpy, *end = " \n\t";
	char **hldr;
	int k, j;

	k = 0;
	j = 0;

	if (holder == NULL)
		return (NULL);
	cpy = compd(holder);
	hold = strtok(cpy, end);
	while (hold)
	{
		j++;
		hold = strtok(NULL, end);
	}
	if (j == 0)
	{
		free(cpy);
		return (NULL);
	}
	hldr = malloc(sizeof(char *) * (j + 1));
	if (hldr == NULL)
		return (NULL);
	hold = strtok(holder, end);
	while (hold != NULL)
	{
		hldr[k] = compd(hold);
		k++;
		hold = strtok(NULL, end);
	}
	hldr[j] = NULL;
	free(cpy);
	return (hldr);
}
#include "monty.h"
#include <stdio.h>
char *exec = NULL;
/**
 * main - Thi sis the main entry file
 * @argc: this is argument count
 * @argv: pointer containing all arguments
 * Return: 0 for success
 */
int main(int argc, char **argv)
{
	char *gap = NULL, **prim;
	stack_t *head = NULL;
	FILE *fd;
	unsigned int iloc = 0, state = 0;
	size_t str_len = 0;

	confirm_input(argc);
	fd = fopen(argv[1], "r");
	if (fd == NULL)
		open_fail(argv[1]);
	while (getline(&gap, &str_len, fd) != -1)
	{
		iloc++;
		prim = blow(gap);
		if (!prim)
			continue;
		if (prim[0][0] == '#')
		{
			free_prim(prim);
			continue;
		}
		if (strcmp(prim[0], "queue") || !strcmp(prim[0], "stack"))
		{
			state = mode_chckr(prim[0]);
			free_prim(prim);
			continue;
		}
		exec = prim[1];
		if (!(handle_functions(prim[0], iloc)))
			error(gap, prim, iloc, head, fd);
		if (state && (!strcmp(prim[0], "push")))
			handle_functions("queue", iloc)(&head, iloc);
		else
			handle_functions(prim[0], iloc)(&head, iloc);
		free_prim(prim);
	}
	fclose(fd);
	free(gap);
	free_lists(head);
	return (0);
}
#include "monty.h"
/**
 * mod - function finding modulus
 * @stack: pointer to pointer to head of stack
 * @line_number: line number of the OPcode
 */
void mod(stack_t **stack, unsigned int line_number)
{
	int total = 0;

	if (stack == NULL || *stack == NULL || (*stack)->next == NULL)
	{
		fprintf(stderr, "L%d: can't mod, stack is too short\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	if ((*stack)->n == 0)
	{
		fprintf(stderr, "L%d: division by zero\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	(*stack) = (*stack)->next;

	total = (*stack)->n % (*stack)->prev->n;
	(*stack)->n = total;
	free((*stack)->prev);
	(*stack)->prev = NULL;
}
#include "monty.h"
/**
 * mode_chckr - this checks if it is a stack or que
 * @s: Entry OP code
 * Return: 1 for queue or 0 for stack
 */
unsigned int mode_chckr(char *s)
{
	if (!strcmp(s, "queue"))
		return (1);
	return (0);
}

/**
 * open_fail - prints error message for open fail
 * @buf: Name of file
 * Return: void
 */
void open_fail(char *buf)
{
	fprintf(stderr, "Error: Can't open file %s\n", buf);
	exit(EXIT_FAILURE);
}
/**
 * error - error messages passed to std error
 * @buf: The instructions
 * @turn: reads out OP code
 * @l: reads the line number of incident
 * @head: head of the doubly linked list
 * @fd: file pointer
 * Return: void
 */
void error(char *buf, char **turn, unsigned int l, stack_t *head, FILE *fd)
{
	fprintf(stderr, "L%d: unknown instruction %s\n", l, turn[0]);
	free(buf);
	free_prim(turn);
	free_lists(head);
	fclose(fd);
	exit(EXIT_FAILURE);
}
/**
 * confirm_input - This confirms the number of arguement
 * @count: The number of args passed
 */
void confirm_input(int count)
{
	if (count != 2)
	{
		fprintf(stderr, "USAGE: monty file\n");
		exit(EXIT_FAILURE);
	}
	else
		return;
}
#include "monty.h"
/**
 * mul - Multiply the top elements of the stack
 * @stack: double pointer to top of stack
 * @line_number: line number of the OPcode
 */
void mul(stack_t **stack, unsigned int line_number)
{
	int total = 0;

	if (*stack == NULL || (*stack)->next == NULL)
	{
		fprintf(stderr, "L%d: can't mul, stack is too short\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	(*stack) = (*stack)->next;

	total = (*stack)->n * (*stack)->prev->n;
	(*stack)->n = total;
	free((*stack)->prev);
	(*stack)->prev = NULL;
}
#include "monty.h"
/**
 * nop - typically nope
 * @stack: pointer to the pointer pointing to head of stack
 * @line_number: integer representing the line number
 */
void nop(stack_t **stack, unsigned int line_number)
{
	(void)stack;
	(void)line_number;
}
#include "monty.h"
/**
 * pall - prints all the values of the stack
 * @stack: double poointer to stack
 * @line_number: line number
 */
void pall(stack_t **stack, __attribute__((unused))unsigned int line_number)
{
	stack_t *buffer = *stack;

	if (*stack == NULL)
		return;
	while (buffer != NULL)
	{
		printf("%d\n", buffer->n);
		buffer = buffer->next;
	}
}
#include "monty.h"
/**
 * pint - prints the first element of stack
 * @stack: The pointer to stack
 * @line_number: the line number
 */
void pint(stack_t **stack, unsigned int line_number)
{
	if (*stack == NULL)
	{
		fprintf(stderr, "L%d: can't pint, stack empty\n", line_number);
		exit(EXIT_FAILURE);
	}
	printf("%d\n", (*stack)->n);
}
#include "monty.h"
/**
 * pop - Pops the top element of the stack
 * @stack: double pointer to top of stack
 * @line_number: line number of the OPcode
 */
void pop(stack_t **stack, unsigned int line_number)
{
	stack_t *buffer = *stack;

	if (*stack == NULL || stack == NULL)
	{
		fprintf(stderr, "L%d: can't pop an empty stack\n", line_number);
		exit(EXIT_FAILURE);
	}
	(*stack) = (*stack)->next;

	if (*stack != NULL)
		(*stack)->prev = NULL;
	free(buffer);
}
#include "monty.h"
/**
 * push - this pushes a new node to stack from top
 * @stack: is the stack to be added
 * @line_number: number of line
 */
void push(stack_t **stack, __attribute__((unused))unsigned int line_number)
{
	stack_t *to_add = malloc(sizeof(size_t));
	int count;

	if (to_add == NULL)
	{
		fprintf(stderr, "Error: malloc failed\n");
		exit(EXIT_FAILURE);
	}
	if (exec == NULL)
	{
		fprintf(stderr, "L%d: usage: push integer\n", line_number);
		exit(EXIT_FAILURE);
	}
	if ((check_int(exec) == 0))
	{
		fprintf(stderr, "L%d: usage: push integer\n", line_number);
		exit(EXIT_FAILURE);
	}
	count = atoi(exec);
	if (!stack)
		return;
	to_add->n = count;
	to_add->prev = NULL;
	to_add->next = NULL;
	if (*stack == NULL)
		*stack = to_add;
	else
	{
		to_add->next = *stack;
		(*stack)->prev = to_add;
		*stack = to_add;
	}
}

/**
 * push_que - This pushes into the stack from behind
 * @stack: stack to be added
 * @line_number: location of the line
 */
void push_que(stack_t **stack, __attribute((unused))unsigned int line_number)
{
	stack_t *buffer, *to_add = malloc(sizeof(stack_t));
	int count;

	if (to_add == NULL)
	{
		fprintf(stderr, "Error: malloc failed\n");
		exit(EXIT_FAILURE);
	}
	if (exec == NULL)
	{
		fprintf(stderr, "L%d: usage: push integer\n", line_number);
		exit(EXIT_FAILURE);
	}
	if (check_int(exec) == 0)
	{
		fprintf(stderr, "L%d: usage: push integer\n", line_number);
		exit(EXIT_FAILURE);
	}
	count = atoi(exec);
	if (to_add == NULL)
	{
		fprintf(stderr, "Error:malloc failed\n");
		exit(EXIT_FAILURE);
	}
	if (!stack)
		return;
	to_add->n = count;
	to_add->prev = NULL;
	to_add->next = NULL;
	if (*stack == NULL)
		*stack = to_add;
	else
	{
		buffer = *stack;
		while (buffer->next != NULL)
			buffer = buffer->next;
		buffer->next = to_add;
		to_add->prev = buffer;
	}
}
#include "monty.h"
/**
 * rotr - entry function that inverses the stacks order
 * @stack: double pointer to the stack
 * @line_number: line number for the function
 */
void rotr(stack_t **stack, unsigned int line_number)
{
	stack_t *buffer, *new_buffer;
	(void) line_number;

	if (!*stack || !(*stack)->next)
		return;
	buffer = *stack;
	while (buffer->next)
		buffer = buffer->next;
	new_buffer = buffer->prev;
	new_buffer->next = NULL;
	buffer->prev = NULL;

	buffer->next = *stack;
	(*stack)->prev = buffer;
	*stack = buffer;
	/* realigned*/
}
/**
 * rotl - inverses upwards
 * @stack: double poointer to stack
 * @line_number: line number
 */
void rotl(stack_t **stack, unsigned int line_number)
{
	stack_t *buffer, *new_buffer;
	(void) line_number;

	if (!*stack || !(*stack)->next)
		return;
	buffer = *stack;
	*stack = (*stack)->next;
	(*stack)->prev = NULL;
	buffer->next = NULL;
	new_buffer = *stack;
	while (new_buffer->next)
		new_buffer = new_buffer->next;
	new_buffer->next = buffer;
	buffer->prev = new_buffer;
}
#include "monty.h"
/**
 * pstr - function prints str from stack
 * @stack: double pointer to stack
 * @line_number: line number
 */
void pstr(stack_t **stack, unsigned int line_number)
{
	int count;
	stack_t *buffer = *stack;
	(void)line_number;

	if (!*stack)
	{
		printf("\n");
		return;
	}

	while (buffer)
	{
		count = buffer->n;
		if (count > 0 && count <= 127)
		{
			printf("%c", count);
			buffer = buffer->next;
		}
		else
			break;
	}
	printf("\n");
}
#include "monty.h"
/**
 * sub - Subtracts the top elements of the stack
 * @stack: double pointer to top of stack
 * @line_number: line number of the OPcode
 */
void sub(stack_t **stack, unsigned int line_number)
{
	int total = 0;

	if (*stack == NULL || (*stack)->next == NULL)
	{
		fprintf(stderr, "L%d: can't sub, stack is too short\n", line_number);
		free_lists(*stack);
		exit(EXIT_FAILURE);
	}
	(*stack) = (*stack)->next;

	total = (*stack)->n - (*stack)->prev->n;
	(*stack)->n = total;
	free((*stack)->prev);
	(*stack)->prev = NULL;
}
#include "monty.h"
/**
 * swap - swaps the head and the following lin
 * @stack: double pointer to head of stack
 * @line_number: line number in
 */
void swap(stack_t **stack, unsigned int line_number)
{
	stack_t *buffer = *stack;


	if (buffer == NULL || buffer->next == NULL)
	{
		fprintf(stderr, "L%d: can't swap, stack too short\n", line_number);
		exit(EXIT_FAILURE);
	}
	else
	{
		*stack = buffer->next;
		(*stack)->prev = NULL;
		buffer->prev = *stack;
		buffer->next = (*stack)->next;
		(*stack)->next = buffer;
	}
}
